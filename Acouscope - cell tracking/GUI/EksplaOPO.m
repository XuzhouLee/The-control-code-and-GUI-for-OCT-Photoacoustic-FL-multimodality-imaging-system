function handles = EksplaOPO(handles)


    %% Check if window was created and is open
    if ishandle(getappdata(0, 'tabLaserOPOHdl'))
        close(getappdata(0, 'tabLaserOPOHdl'));
        setappdata(0, 'tabLaserOPOHdl',[]);
        return;
    end

    %check if laser is connected    
    [connectstatus, eksplaerror] = connectEkspla(handles);

    if connectstatus == 1
        ConnectionStatusCtrlString = 'Connected';
        ConnectionStatusCtrlbackground = [.1 .9 .1];
    else
        ConnectionStatusCtrlString = 'Disconnected'
        ConnectionStatusCtrlbackground = [.9 .1 .1];
    end    
    % get wavelength for initialization og GUI
    OPOStatus = getOPOWavelength(handles);
    wavelength = OPOStatus.Wavelength;
        
    
    
%     handles.hfigOPO=figure('MenuBar','none',...
%                 'Name','OPO Settings',...
%                 'Units','normalized',...
%                 'Position',[.85,.35,.15,.2],...
%                 'Tag', 'LaserOPO',...
%                 'Resize','on',...
%                 'Visible','on',...
%                 'CloseRequestFcn',{@GUI_closereq, handles});
%     setappdata(0, 'tabLaserOPOHdl', handles.hfigOPO);
handles.hfigOPO = uipanel('Parent', handles.hfigM,...
                            'Title', 'OPO Settings',...
                            'Fontweight', 'bold',...
                            'Units', 'normalized',...
                            'Fontsize', 12, ...
                            'Position', [.525, .52, .45, .48]); 

    %% Controller connection status        
    handles.OPO.ConnectionStatusText = uicontrol(... % List of available types of plot
                         'Parent', handles.hfigOPO,... 
                         'String','Controller',...
                         'Units','normalized',...
                         'Fontsize',12,...
                         'Fontweight', 'bold',...
                         'Position',[.05 .84 .35 .12],...
                         'HorizontalAlignment', 'center',...
                         'Style','text'); 


    handles.OPO.ConnectionStatusCtrl = uicontrol(... % List of available types of plot
                         'Parent', handles.hfigOPO,... 
                         'Units','normalized',...
                         'Position',[0.42 .84 .45 .12],...
                         'Fontsize',12,...
                         'Fontweight', 'bold',...
                         'String', ConnectionStatusCtrlString,...
                         'Backgroundcolor', ConnectionStatusCtrlbackground,...
                         'Style','text');                   

     %% Amplifier ON status and Control
     handles.OPO.AmpStatusText = uicontrol(... % List of available types of plot
                         'Parent', handles.hfigOPO,... 
                         'String','Amplifier',...
                         'Units','normalized',...
                         'Fontsize',12,...
                         'Fontweight', 'bold',...
                         'Position',[.05 .7 .35 .12],...
                         'HorizontalAlignment', 'center',...
                         'Style','text'); 

    handles.OPO.AmpStatusCtrl = uicontrol(... % List of available types of plot
                         'Parent', handles.hfigOPO,... 
                         'Units','normalized',...
                         'Position',[0.42 .7 .45 .12],...
                         'Min', 0,...
                         'Max', 1,...
                         'SliderStep', [1,1],...
                         'Style','slider',...
                         'Value', OPOStatus.AmpON);         

    %% Wavelength set                 
    handles.OPO.WavelengthText = uicontrol(... % List of available types of plot
                         'Parent', handles.hfigOPO,... 
                         'String','Wavelength 405-2600 [nm]',...
                         'Units','normalized',...
                         'Fontsize',11,...
                         'Fontweight', 'bold',...
                         'Position',[.05 .56 .35 .12],...
                         'HorizontalAlignment', 'center',...
                         'Style','text'); 

    handles.OPO.WavelengthEdt = uicontrol(... % List of available types of plot
                         'Parent', handles.hfigOPO,... 
                         'Units','normalized',...
                         'Fontsize',10,...
                         'Position',[0.42 .56 .3 .12],...
                         'Style','edit',...
                         'String', num2str(OPOStatus.Wavelength, '%5.1f'));
    handles.OPO.WavelengthBtn = uicontrol(... % List of available types of plot
                         'Parent', handles.hfigOPO,... 
                         'String', 'Set',...
                         'Units','normalized',...
                         'Fontsize',12,...
                         'Position',[0.73 .56 .14 .12],...
                         'Style','pushbutton');
      %% waveplate set               
      handles.OPO.WavePlateText = uicontrol(... % List of available types of plot
                         'Parent', handles.hfigOPO,... 
                         'String','Fractional Energy [0-1]',...
                         'Units','normalized',...
                         'Fontsize',11,...
                         'Fontweight', 'bold',...
                         'Position',[.05 .32 .35 .22],...
                         'HorizontalAlignment', 'center',...
                         'Style','text'); 
                     
     % get current position:
    currentPos = TDC001ReqCurntPos_00(handles.wvplt);
    % estimated transmission:
    relativeAngle = (getappdata(0, 'WvPltMinTransAngle')-currentPos)*pi/180;
    Transmission = sin(2*relativeAngle)^2; %fractional transmission from T = sin^2(2 theta)
    
    handles.OPO.WavePlateEdt = uicontrol(... % List of available types of plot
                         'Parent', handles.hfigOPO,... 
                         'String', num2str(Transmission,'%5.4f'),...
                         'Fontsize',10,...
                         'Units','normalized',...
                         'Position',[0.42 .43 .48 .11],...
                         'Style','edit');
    
    handles.OPO.WavePlateBtn = uicontrol(... % List of available types of plot
                         'Parent', handles.hfigOPO,... 
                         'String', 'Set',...
                         'Units','normalized',...
                         'Position',[0.42 .32 .48 .1],...
                         'Style','slider',...
                         'Value', Transmission,...
                         'Min', 0, ...
                         'Max', 1,...
                         'SliderStep', [0.0001, 0.005]);
                     
    %% calibrate energy
    handles.OPO.CalibrateHndl = uicontrol('Parent', handles.hfigOPO,... 
                         'String', 'Calibrate Energy',...
                         'Units','normalized',...
                         'Fontsize',12,...
                         'Position',[0.05 .18 .9 .12],...
                         'Style','pushbutton',...
                         'Enable', 'on');  
                     
                     
                     
    %% Launch beam profiler
    handles.OPO.ProfileViewerHndl = uicontrol('Parent', handles.hfigOPO,... 
                         'String', 'Launch beam profiler',...
                         'Units','normalized',...
                         'Fontsize',12,...
                         'Position',[0.05 .05 .9 .12],...
                         'Style','pushbutton',...
                         'Enable', 'off');           

    %% Callbacks                 
    set(handles.OPO.AmpStatusCtrl, 'callback', {@AmpCtrl_Callback, handles});%
    set(handles.OPO.WavelengthEdt, 'callback', {@WavelengthEdtCtrl_Callback, handles});%
    set(handles.OPO.WavelengthBtn, 'callback', {@WavelengthBtnCtrl_Callback, handles});%
    set(handles.OPO.WavePlateBtn, 'callback', {@WavePlateBtnCtrl_Callback, handles});
    set(handles.OPO.WavePlateEdt, 'callback', {@WavePlateEdtCtrl_Callback, handles});
    set(handles.OPO.CalibrateHndl, 'callback', {@Calibrate_Callback, handles});
    set(handles.OPO.ProfileViewerHndl, 'callback', {@LiveProfileView_Callback, handles});
    
    


end

    % Callback to switch AMP ON
    function AmpCtrl_Callback(source, event, handles)
        if get(source, 'Value') == 1
            [OPOStatus, err] = switchOPOAmp(handles, 'ON');
            if err == 0
                disp('laser switched on')
            else
                errordlg('Could not switch on laser');
                set(source, 'Value', 0)
            end
        else
            switchOPOAmp(handles, 'OFF');
        end

    end
    % Callback to set wavelength
    function WavelengthEdtCtrl_Callback(source, event, handles)
        lambda = str2num(get(source, 'String'));
        setValidWavelength(handles, lambda);
    end

    function WavelengthBtnCtrl_Callback(source, event, handles)
        lambda = str2num(get(handles.OPO.WavelengthEdt, 'String'));
        setValidWavelength(handles, lambda);
    end
    
    % check that the user input is in the valide wavelength range for the
    % OPO: 405nm-2400nm
    function setValidWavelength(handles, lambda)
        if lambda < 405
            errordlg('Wavelength cannot be shorter than 405 nm. Resetting to 500 nm.')
            lambda = 500;
        elseif lambda > 2400
            errordlg('Wavelength cannot be longer than 2400 nm. Resetting to 500 nm.')
            lambda = 500;
        end

        handles = setOPOWavelength(handles, lambda);
    end
    % display camera (not implemented)
    function LiveProfileView_Callback(source, event, handles)
        LiveProfileviewer(handles);
    end
    
    
    function WavePlateBtnCtrl_Callback(src, evnt, handles)
        fraction = get(src, 'Value');
        setappdata(0,'FractionValue', fraction);
        SetLsrTransWP_00(handles.wvplt, fraction);
        set(handles.OPO.WavePlateEdt, 'String', num2str(fraction,'%5.4f'));
        
    end
    
    function WavePlateEdtCtrl_Callback(src, evnt, handles)
        fraction = str2num(get(src, 'String'));
        SetLsrTransWP_00(handles.wvplt, fraction);
        set(handles.OPO.WavePlateBtn, 'Value', fraction);
    end

    function Calibrate_Callback(src, event, handles)
        EnergyCalib(src, event, handles);
    end