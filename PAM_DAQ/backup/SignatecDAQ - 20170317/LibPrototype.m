function [methodinfo,structs,enuminfo,ThunkLibName]=LibPrototype
%LIBPROTOTYPE Create structures to define interfaces found in 'px1500'.

%This function was generated by loadlibrary.m parser version  on Wed Apr 27 11:06:56 2016
%perl options:'px1500.i -outfile=LibPrototype.m -thunkfile=signalib_thunk_pcwin64.c -header=px1500.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'signalib_thunk_pcwin64');
%  int __cdecl GetDeviceCountPX4 (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='GetDeviceCountPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int __cdecl ConnectToDevicePX4 ( HPX4 * phDev , unsigned int brdNum ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='ConnectToDevicePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_PtrPtr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl DisconnectFromDevicePX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DisconnectFromDevicePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl ConnectToVirtualDevicePX4 ( HPX4 * phDev , unsigned int serialNum , unsigned int brdNum ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32Thunk';fcns.name{fcnNum}='ConnectToVirtualDevicePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_PtrPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl IsDeviceVirtualPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsDeviceVirtualPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl IsHandleValidPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsHandleValidPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl IsDeviceRemotePX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsDeviceRemotePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl DuplicateHandlePX4 ( HPX4 hBrd , HPX4 * phNew ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='DuplicateHandlePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 's_px4hs_PtrPtr'};fcnNum=fcnNum+1;
%  int __cdecl GetSerialNumberPX4 ( HPX4 hBrd , unsigned int * snp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSerialNumberPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetOrdinalNumberPX4 ( HPX4 hBrd , unsigned int * onp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetOrdinalNumberPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetBoardRevisionPX4 ( HPX4 hBrd , unsigned int * revp , unsigned int * sub_revp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetBoardRevisionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetBoardFeaturesPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetBoardFeaturesPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl CopyHardwareSettingsPX4 ( HPX4 hBrdDst , HPX4 hBrdSrc ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CopyHardwareSettingsPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 's_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetBoardNameAPX4 ( HPX4 hBrd , char ** bufpp , int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetBoardNameAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetBoardNameWPX4 ( HPX4 hBrd , wchar_t ** bufpp , int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetBoardNameWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint16PtrPtr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SocketsInitPX4 (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='SocketsInitPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int __cdecl SocketsCleanupPX4 (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='SocketsCleanupPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int __cdecl GetRemoteDeviceCountAPX4 ( const char * server_addrp , unsigned short port , unsigned int ** sn_bufpp ); 
fcns.thunkname{fcnNum}='int32cstringuint16voidPtrThunk';fcns.name{fcnNum}='GetRemoteDeviceCountAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'uint16', 'uint32PtrPtr'};fcnNum=fcnNum+1;
%  int __cdecl GetRemoteDeviceCountWPX4 ( const wchar_t * server_addrp , unsigned short port , unsigned int ** sn_bufpp ); 
fcns.thunkname{fcnNum}='int32voidPtruint16voidPtrThunk';fcns.name{fcnNum}='GetRemoteDeviceCountWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16', 'uint32PtrPtr'};fcnNum=fcnNum+1;
%  int __cdecl ConnectToRemoteDeviceAPX4 ( HPX4 * phDev , unsigned int brdNum , PX4S_REMOTE_CONNECT_CTXA * ctxp ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='ConnectToRemoteDeviceAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_PtrPtr', 'uint32', 's_PX4S_REMOTE_CONNECT_CTXA_tagPtr'};fcnNum=fcnNum+1;
%  int __cdecl ConnectToRemoteDeviceWPX4 ( HPX4 * phDev , unsigned int brdNum , PX4S_REMOTE_CONNECT_CTXW * ctxp ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='ConnectToRemoteDeviceWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_PtrPtr', 'uint32', 's_PX4S_REMOTE_CONNECT_CTXW_tagPtr'};fcnNum=fcnNum+1;
%  int __cdecl ConnectToRemoteVirtualDeviceAPX4 ( HPX4 * phDev , unsigned int serialNum , unsigned int brdNum , PX4S_REMOTE_CONNECT_CTXA * ctxp ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='ConnectToRemoteVirtualDeviceAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_PtrPtr', 'uint32', 'uint32', 's_PX4S_REMOTE_CONNECT_CTXA_tagPtr'};fcnNum=fcnNum+1;
%  int __cdecl ConnectToRemoteVirtualDeviceWPX4 ( HPX4 * phDev , unsigned int serialNum , unsigned int brdNum , PX4S_REMOTE_CONNECT_CTXW * ctxp ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='ConnectToRemoteVirtualDeviceWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_PtrPtr', 'uint32', 'uint32', 's_PX4S_REMOTE_CONNECT_CTXW_tagPtr'};fcnNum=fcnNum+1;
%  int __cdecl GetServiceSocketPX4 ( HPX4 hBrd , px4_socket_t * sockp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetServiceSocketPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  int __cdecl SendServiceRequestPX4 ( HPX4 hBrd , const void * svc_reqp , int req_bytes , void ** responsepp , unsigned int timeoutMs , unsigned int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32voidPtruint32uint32Thunk';fcns.name{fcnNum}='SendServiceRequestPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'voidPtr', 'int32', 'voidPtrPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl FreeServiceResponsePX4 ( void * bufp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FreeServiceResponsePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int __cdecl GetHostServerInfoAPX4 ( HPX4 hBrd , char ** server_addrpp , unsigned short * portp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetHostServerInfoAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'stringPtrPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetHostServerInfoWPX4 ( HPX4 hBrd , wchar_t ** server_addrpp , unsigned short * portp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetHostServerInfoWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint16PtrPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int __cdecl AcquireToBoardRamPX4 ( HPX4 hBrd , unsigned int samp_start , unsigned int samp_count , unsigned int timeout_ms , int bAsynchronous ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32uint32int32Thunk';fcns.name{fcnNum}='AcquireToBoardRamPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint32', 'uint32', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl AcquireToSabPX4 ( HPX4 hBrd , unsigned int samp_count , int bRamBuffered , unsigned int timeout_ms , int bAsynchronous ); 
fcns.thunkname{fcnNum}='int32voidPtruint32int32uint32int32Thunk';fcns.name{fcnNum}='AcquireToSabPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'int32', 'uint32', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl BeginBufferedPciAcquisitionPX4 ( HPX4 hBrd , unsigned int samp_count ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='BeginBufferedPciAcquisitionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetPciAcquisitionDataFastPX4 ( HPX4 hBrd , unsigned int samples , px4_sample_t * dma_bufp , int bAsynchronous ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrint32Thunk';fcns.name{fcnNum}='GetPciAcquisitionDataFastPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetPciAcquisitionDataBufPX4 ( HPX4 hBrd , unsigned int samples , px4_sample_t * heap_bufp , int bAsynchronous ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrint32Thunk';fcns.name{fcnNum}='GetPciAcquisitionDataBufPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl EndBufferedPciAcquisitionPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EndBufferedPciAcquisitionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl IsAcquisitionInProgressPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsAcquisitionInProgressPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl WaitForAcquisitionCompletePX4 ( HPX4 hBrd , unsigned int timeout_ms ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='WaitForAcquisitionCompletePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl AllocateDmaBufferPX4 ( HPX4 hBrd , unsigned int samples , px4_sample_t ** bufpp ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='AllocateDmaBufferPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint8PtrPtr'};fcnNum=fcnNum+1;
%  int __cdecl FreeDmaBufferPX4 ( HPX4 hBrd , px4_sample_t * bufp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='FreeDmaBufferPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  int __cdecl EnsureUtilityDmaBufferPX4 ( HPX4 hBrd , unsigned int sample_count ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='EnsureUtilityDmaBufferPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl FreeUtilityDmaBufferPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FreeUtilityDmaBufferPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetUtilityDmaBufferPX4 ( HPX4 hBrd , px4_sample_t ** bufpp , unsigned int * buf_samplesp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetUtilityDmaBufferPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint8PtrPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl EnsureUtilityDmaBuffer2PX4 ( HPX4 hBrd , unsigned int sample_count ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='EnsureUtilityDmaBuffer2PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl FreeUtilityDmaBuffer2PX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FreeUtilityDmaBuffer2PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetUtilityDmaBuffer2PX4 ( HPX4 hBrd , px4_sample_t ** bufpp , unsigned int * buf_samplesp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetUtilityDmaBuffer2PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint8PtrPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl ReadSampleRamFastPX4 ( HPX4 hBrd , unsigned int sample_start , unsigned int sample_count , px4_sample_t * dma_bufp , int bAsynchronous ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrint32Thunk';fcns.name{fcnNum}='ReadSampleRamFastPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint32', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl IsTransferInProgressPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsTransferInProgressPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl WaitForTransferCompletePX4 ( HPX4 hBrd , unsigned int timeout_ms ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='WaitForTransferCompletePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl ReadSampleRamBufPX4 ( HPX4 hBrd , unsigned int sample_start , unsigned int sample_count , px4_sample_t * bufp , int bAsynchronous ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrint32Thunk';fcns.name{fcnNum}='ReadSampleRamBufPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint32', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl ReadSampleRamMultiChannelBufPX4 ( HPX4 hBrd , unsigned int sample_start , unsigned int samples_per_chan , px4_sample_t * buf_ch1p , px4_sample_t * buf_ch2p , px4_sample_t * buf_ch3p , px4_sample_t * buf_ch4p , int chan_sel ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ReadSampleRamMultiChannelBufPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint32', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl ReadSampleRamFileFastPX4 ( HPX4 hBrd , unsigned int sample_start , unsigned int sample_count , px4_sample_t * dma_bufp , unsigned int dma_buf_samples , PX4S_FILE_WRITE_PARAMS * paramsp ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='ReadSampleRamFileFastPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint32', 'uint8Ptr', 'uint32', 's_PX4S_FILE_WRITE_PARAMS_tagPtr'};fcnNum=fcnNum+1;
%  int __cdecl ReadSampleRamFileBufPX4 ( HPX4 hBrd , unsigned int sample_start , unsigned int sample_count , PX4S_FILE_WRITE_PARAMS * paramsp ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='ReadSampleRamFileBufPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint32', 's_PX4S_FILE_WRITE_PARAMS_tagPtr'};fcnNum=fcnNum+1;
%  int __cdecl TransferSampleRamToSabPX4 ( HPX4 hBrd , unsigned int sample_start , unsigned int sample_count , unsigned int timeout_ms , int bAsynchronous ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32uint32int32Thunk';fcns.name{fcnNum}='TransferSampleRamToSabPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint32', 'uint32', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl _DumpRawDataPX4 ( HPX4 hBrd , px4_sample_t * bufp , unsigned samples , PX4S_FILE_WRITE_PARAMS * paramsp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='_DumpRawDataPX4'; fcns.alias{fcnNum}='DumpRawDataPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint8Ptr', 'uint32', 's_PX4S_FILE_WRITE_PARAMS_tagPtr'};fcnNum=fcnNum+1;
%  int __cdecl DeInterleaveData2ChanPX4 ( const px4_sample_t * srcp , unsigned int samples_in , px4_sample_t * dst_ch1p , px4_sample_t * dst_ch2p ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='DeInterleaveData2ChanPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint32', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  int __cdecl InterleaveData2ChanPX4 ( const px4_sample_t * src_ch1p , const px4_sample_t * src_ch2p , unsigned int samps_per_chan , px4_sample_t * dstp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='InterleaveData2ChanPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  int __cdecl DeInterleaveData3ChanPX4 ( const px4_sample_t * srcp , unsigned int samples_in , px4_sample_t * dst_ch1p , px4_sample_t * dst_ch2p , px4_sample_t * dst_ch3p ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DeInterleaveData3ChanPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint32', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  int __cdecl InterleaveData3ChanPX4 ( const px4_sample_t * src_ch1p , const px4_sample_t * src_ch2p , const px4_sample_t * src_ch3p , unsigned int samps_per_chan , px4_sample_t * dstp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='InterleaveData3ChanPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  int __cdecl DeInterleaveData4ChanPX4 ( const px4_sample_t * srcp , unsigned int samples_in , px4_sample_t * dst_ch1p , px4_sample_t * dst_ch2p , px4_sample_t * dst_ch3p , px4_sample_t * dst_ch4p ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DeInterleaveData4ChanPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint32', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  int __cdecl InterleaveData4ChanPX4 ( const px4_sample_t * src_ch1p , const px4_sample_t * src_ch2p , const px4_sample_t * src_ch3p , const px4_sample_t * src_ch4p , unsigned int samps_per_chan , px4_sample_t * dstp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='InterleaveData4ChanPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  int __cdecl CreateRecordingSessionPX4 ( HPX4 hBrd , PX4S_REC_SESSION_PARAMS * rec_paramsp , HPX4RECORDING * handlep ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateRecordingSessionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 's_PX4S_REC_SESSION_PARAMS_tagPtr', 's_px4rsh_PtrPtr'};fcnNum=fcnNum+1;
%  int __cdecl ArmRecordingSessionPX4 ( HPX4RECORDING hRec ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ArmRecordingSessionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4rsh_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetRecordingSessionProgressPX4 ( HPX4RECORDING hRec , PX4S_REC_SESSION_PROG * progp , unsigned flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='GetRecordingSessionProgressPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4rsh_Ptr', 's_PX4S_REC_SESSION_PROG_tagPtr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetRecordingSnapshotPX4 ( HPX4RECORDING hRec , px4_sample_t * bufp , unsigned int samples , unsigned int * samples_gotp , unsigned int * ss_countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetRecordingSnapshotPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4rsh_Ptr', 'uint8Ptr', 'uint32', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl AbortRecordingSessionPX4 ( HPX4RECORDING hRec ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='AbortRecordingSessionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4rsh_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl DeleteRecordingSessionPX4 ( HPX4RECORDING hRec ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DeleteRecordingSessionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4rsh_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetRecordingSessionOutFlagsPX4 ( HPX4RECORDING hRec , unsigned int * flagsp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetRecordingSessionOutFlagsPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4rsh_Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetTimestampOverflowFlagPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetTimestampOverflowFlagPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetTimestampAvailabilityPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetTimestampAvailabilityPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl SetTimestampModePX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetTimestampModePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetTimestampModePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetTimestampModePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetTimestampCounterModePX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetTimestampCounterModePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetTimestampCounterModePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetTimestampCounterModePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl ReadTimestampDataPX4 ( HPX4 hBrd , px4_timestamp_t * bufp , unsigned int ts_count , unsigned int * ts_readp , unsigned int flags , unsigned int timeout_ms , unsigned int * flags_outp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32voidPtruint32uint32voidPtrThunk';fcns.name{fcnNum}='ReadTimestampDataPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint64Ptr', 'uint32', 'uint32Ptr', 'uint32', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetTimestampFifoDepthPX4 ( HPX4 hBrd , unsigned int * ts_elementsp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetTimestampFifoDepthPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetSampleRamSizePX4 ( HPX4 hBrd , unsigned int * samplesp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSampleRamSizePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetSabFpgaTypePX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetSabFpgaTypePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl InIdleModePX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='InIdleModePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl InAcquisitionModePX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='InAcquisitionModePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl SetOperatingModePX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetOperatingModePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetOperatingModePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetOperatingModePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetSegmentSizePX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetSegmentSizePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetSegmentSizePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetSegmentSizePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetSampleCountPX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetSampleCountPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetSampleCountPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetSampleCountPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl _GetSampleCountExPX4 ( HPX4 hBrd , unsigned int * valp , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='_GetSampleCountExPX4'; fcns.alias{fcnNum}='GetSampleCountExPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetStartSamplePX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetStartSamplePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetStartSamplePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetStartSamplePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl _GetStartSampleExPX4 ( HPX4 hBrd , unsigned int * valp , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='_GetStartSampleExPX4'; fcns.alias{fcnNum}='GetStartSampleExPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetActiveMemoryRegionPX4 ( HPX4 hBrd , unsigned int sample_count , unsigned int sample_start ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32Thunk';fcns.name{fcnNum}='SetActiveMemoryRegionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetActiveMemoryRegionPX4 ( HPX4 hBrd , unsigned int * sample_countp , unsigned int * sample_startp , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetActiveMemoryRegionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32Ptr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SynchronizeAdcsPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SynchronizeAdcsPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetMaxSampleCountForActiveChanSelPX4 ( HPX4 hBrd , int active_chan_sel , unsigned int * max_sample_countp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='GetMaxSampleCountForActiveChanSelPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetBankCountForActiveChanSelPX4 ( int active_chan_sel ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='GetBankCountForActiveChanSelPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetTriggerDelaySamplesPX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetTriggerDelaySamplesPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetTriggerDelaySamplesPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetTriggerDelaySamplesPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetPreTriggerSamplesPX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetPreTriggerSamplesPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetPreTriggerSamplesPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetPreTriggerSamplesPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetTriggerLevelAPX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetTriggerLevelAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetTriggerLevelAPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetTriggerLevelAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetTriggerLevelBPX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetTriggerLevelBPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetTriggerLevelBPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetTriggerLevelBPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetTriggerModePX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetTriggerModePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetTriggerModePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetTriggerModePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetTriggerSourcePX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetTriggerSourcePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetTriggerSourcePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetTriggerSourcePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetTriggerDirectionAPX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetTriggerDirectionAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetTriggerDirectionAPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetTriggerDirectionAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetTriggerDirectionBPX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetTriggerDirectionBPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetTriggerDirectionBPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetTriggerDirectionBPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetTriggerDirectionExtPX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetTriggerDirectionExtPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetTriggerDirectionExtPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetTriggerDirectionExtPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl IssueSoftwareTriggerPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IssueSoftwareTriggerPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetInputVoltRangeCh1PX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetInputVoltRangeCh1PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetInputVoltRangeCh2PX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetInputVoltRangeCh2PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetInputVoltRangeCh3PX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetInputVoltRangeCh3PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetInputVoltRangeCh4PX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetInputVoltRangeCh4PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetInputVoltRangeFromSettingPX4 ( int vr_sel , double * vpp ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='GetInputVoltRangeFromSettingPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr'};fcnNum=fcnNum+1;
%  int __cdecl GetInputVoltageRangeVoltsCh1PX4 ( HPX4 hBrd , double * voltsp , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetInputVoltageRangeVoltsCh1PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetInputVoltageRangeVoltsCh2PX4 ( HPX4 hBrd , double * voltsp , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetInputVoltageRangeVoltsCh2PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetInputVoltageRangeVoltsCh3PX4 ( HPX4 hBrd , double * voltsp , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetInputVoltageRangeVoltsCh3PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetInputVoltageRangeVoltsCh4PX4 ( HPX4 hBrd , double * voltsp , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetInputVoltageRangeVoltsCh4PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetInternalAdcClockReferencePX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetInternalAdcClockReferencePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetInternalAdcClockReferencePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetInternalAdcClockReferencePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetTriggerSelectionPX4 ( HPX4 hBrd , int val ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetTriggerSelectionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetTriggerHysteresisPX4 ( HPX4 hBrd , int val ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetTriggerHysteresisPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetFPGATemperaturePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetFPGATemperaturePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetExternalClockRatePX4 ( HPX4 hBrd , double dRateMHz ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubleThunk';fcns.name{fcnNum}='SetExternalClockRatePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'double'};fcnNum=fcnNum+1;
%  int __cdecl GetExternalClockRatePX4 ( HPX4 hBrd , double * ratep , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetExternalClockRatePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetInternalAdcClockRatePX4 ( HPX4 hBrd , double dRateMHz ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubleThunk';fcns.name{fcnNum}='SetInternalAdcClockRatePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'double'};fcnNum=fcnNum+1;
%  int __cdecl GetInternalAdcClockRatePX4 ( HPX4 hBrd , double * ratep , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetInternalAdcClockRatePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetAdcClockSourcePX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetAdcClockSourcePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetAdcClockSourcePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetAdcClockSourcePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetExtClockDividersPX4 ( HPX4 hBrd , unsigned int div1 , unsigned int div2 ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint32Thunk';fcns.name{fcnNum}='SetExtClockDividersPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl SetExtClockDivider1PX4 ( HPX4 hBrd , unsigned int div1 ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetExtClockDivider1PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl SetExtClockDivider2PX4 ( HPX4 hBrd , unsigned int div2 ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetExtClockDivider2PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetExtClockDivider1PX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetExtClockDivider1PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetExtClockDivider2PX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetExtClockDivider2PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetPostAdcClockDividerPX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetPostAdcClockDividerPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetPostAdcClockDividerPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetPostAdcClockDividerPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl _SetPllDisablePX4 ( HPX4 hBrd , int bDisable ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='_SetPllDisablePX4'; fcns.alias{fcnNum}='SetPllDisablePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl _GetPllDisablePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='_GetPllDisablePX4'; fcns.alias{fcnNum}='GetPllDisablePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetEffectiveAcqRatePX4 ( HPX4 hBrd , double * pRateMHz ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetEffectiveAcqRatePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'doublePtr'};fcnNum=fcnNum+1;
%  int __cdecl GetActualAdcAcqRatePX4 ( HPX4 hBrd , double * pRateMHz ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetActualAdcAcqRatePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'doublePtr'};fcnNum=fcnNum+1;
%  int __cdecl SetDigitalIoModePX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetDigitalIoModePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetDigitalIoModePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetDigitalIoModePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetDigitalIoEnablePX4 ( HPX4 hBrd , unsigned int bEnable ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetDigitalIoEnablePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetDigitalIoEnablePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetDigitalIoEnablePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetActiveChannelsPX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetActiveChannelsPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetActiveChannelsPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetActiveChannelsPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetChannelCountFromChanSelPX4 ( int chanSel ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='GetChannelCountFromChanSelPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetPhysChanNumFromChanSelIdxPX4 ( int chanSel , int idx ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='GetPhysChanNumFromChanSelIdxPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetActiveChannelsMaskPX4 ( HPX4 hBrd , unsigned int chan_mask , int bAdcInt ); 
fcns.thunkname{fcnNum}='int32voidPtruint32int32Thunk';fcns.name{fcnNum}='SetActiveChannelsMaskPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetActiveChannelMaskPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetActiveChannelMaskPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl IsActiveChannelMaskSupportedPX4 ( HPX4 hBrd , unsigned int chan_mask ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='IsActiveChannelMaskSupportedPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetAbsChanIdxFromChanMaskPX4 ( int chan_mask , int rel_idx ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='GetAbsChanIdxFromChanMaskPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetRelChanIdxFromChanMaskPX4 ( int chan_mask , int abs_idx ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='GetRelChanIdxFromChanMaskPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetChanCountFromChanMaskPX4 ( int chan_mask ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='GetChanCountFromChanMaskPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetChanMaskFromChanSelPX4 ( int active_channels ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='GetChanMaskFromChanSelPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetChanSelFromChanMaskPX4 ( int chan_mask ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='GetChanSelFromChanMaskPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetDcOffsetCh1PX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetDcOffsetCh1PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetDcOffsetCh1PX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetDcOffsetCh1PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetDcOffsetCh2PX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetDcOffsetCh2PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetDcOffsetCh2PX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetDcOffsetCh2PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetDcOffsetCh3PX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetDcOffsetCh3PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetDcOffsetCh3PX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetDcOffsetCh3PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetDcOffsetCh4PX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetDcOffsetCh4PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetDcOffsetCh4PX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetDcOffsetCh4PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl CenterSignalPX4 ( HPX4 hBrd , int chan_idx , px4_sample_t center_to ); 
fcns.thunkname{fcnNum}='int32voidPtrint32uint8Thunk';fcns.name{fcnNum}='CenterSignalPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32', 'uint8'};fcnNum=fcnNum+1;
%  int __cdecl SetSabBoardNumberPX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetSabBoardNumberPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetSabBoardNumberPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetSabBoardNumberPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetSabConfigurationPX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetSabConfigurationPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetSabConfigurationPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetSabConfigurationPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetSabClockPX4 ( HPX4 hBrd , unsigned int val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetSabClockPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetSabClockPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetSabClockPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetFpgaSlaveEnablePX4 ( HPX4 hBrd , unsigned int bEnable ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetFpgaSlaveEnablePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetFpgaSlaveEnablePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetFpgaSlaveEnablePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetBoardProcessingParamPX4 ( HPX4 hBrd , unsigned short idx , unsigned short value ); 
fcns.thunkname{fcnNum}='int32voidPtruint16uint16Thunk';fcns.name{fcnNum}='SetBoardProcessingParamPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  int __cdecl SetBoardProcessingEnablePX4 ( HPX4 hBrd , unsigned int bEnable ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetBoardProcessingEnablePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetBoardProcessingEnablePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetBoardProcessingEnablePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SetRouteToSdram2EnablePX4 ( HPX4 hBrd , unsigned int bEnable ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='SetRouteToSdram2EnablePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetRouteToSdram2EnablePX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetRouteToSdram2EnablePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetMasterSlaveConfigurationPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetMasterSlaveConfigurationPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetSyncConfigurationPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetSyncConfigurationPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetExtTriggerConfigurationPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetExtTriggerConfigurationPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetAnalogPathConfigurationPX4 ( HPX4 hBrd , int bFromCache ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetAnalogPathConfigurationPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetInputChannelConfigurationPX4 ( HPX4 hBrd , int chan_idx ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetInputChannelConfigurationPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetInputChannelFlagsPX4 ( HPX4 hBrd , int chan_idx ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='GetInputChannelFlagsPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetSysFpgaTypePX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetSysFpgaTypePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetUsrFpgaTypePX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetUsrFpgaTypePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetSamplesCompleteFlagPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetSamplesCompleteFlagPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetFifoFullFlagPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetFifoFullFlagPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetPllLockStatusPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetPllLockStatusPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl RefreshLocalRegisterCachePX4 ( HPX4 hBrd , unsigned int bFromHardware ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='RefreshLocalRegisterCachePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl RewriteHardwareSettingsPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='RewriteHardwareSettingsPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl SetPowerupDefaultsPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetPowerupDefaultsPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl IsFixedLogicPackagePresentPX4 ( HPX4 hBrd , unsigned short flp ); 
fcns.thunkname{fcnNum}='int32voidPtruint16Thunk';fcns.name{fcnNum}='IsFixedLogicPackagePresentPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint16'};fcnNum=fcnNum+1;
%  int __cdecl FLPC2_SetDecimationFactorPX4 ( HPX4 hBrd , unsigned val ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='FLPC2_SetDecimationFactorPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl FLPC2_SetNcoFrequencyPX4 ( HPX4 hBrd , double nco_freqMHz ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubleThunk';fcns.name{fcnNum}='FLPC2_SetNcoFrequencyPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'double'};fcnNum=fcnNum+1;
%  int __cdecl FLPC4_GetFftSizeLimitsPX4 ( HPX4 hBrd , unsigned int * min_fft_sizep , unsigned int * max_fft_sizep ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FLPC4_GetFftSizeLimitsPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl FLPC4_SetFftSizePX4 ( HPX4 hBrd , unsigned fft_size ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='FLPC4_SetFftSizePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl FLPC4_SetZeroPadPointsPX4 ( HPX4 hBrd , unsigned zero_points ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='FLPC4_SetZeroPadPointsPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl FLPC4_SetMagnitudeSquaredEnablePX4 ( HPX4 hBrd , int bEnable ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='FLPC4_SetMagnitudeSquaredEnablePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl FLPC4_LoadWindow ( HPX4 hBrd , const short * coefficients , unsigned coefficient_count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='FLPC4_LoadWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int16Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl FLPC5_LoadCoefficientsPX4 ( HPX4 hBrd , const short * coefficients , int ordering ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='FLPC5_LoadCoefficientsPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int16Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl FLPC6_LoadCoefficientsCh1PX4 ( HPX4 hBrd , const short * coefficients , int ordering ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='FLPC6_LoadCoefficientsCh1PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int16Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl FLPC6_LoadCoefficientsCh2PX4 ( HPX4 hBrd , const short * coefficients , int ordering ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='FLPC6_LoadCoefficientsCh2PX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int16Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl SaveSettingsToStringXmlAPX4 ( HPX4 hBrd , unsigned int flags , char ** bufpp ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='SaveSettingsToStringXmlAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  int __cdecl SaveSettingsToStringXmlWPX4 ( HPX4 hBrd , unsigned int flags , wchar_t ** bufpp ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='SaveSettingsToStringXmlWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint16PtrPtr'};fcnNum=fcnNum+1;
%  int __cdecl LoadSettingsFromStringXmlAPX4 ( HPX4 hBrd , unsigned int flags , const char * bufp ); 
fcns.thunkname{fcnNum}='int32voidPtruint32cstringThunk';fcns.name{fcnNum}='LoadSettingsFromStringXmlAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'cstring'};fcnNum=fcnNum+1;
%  int __cdecl LoadSettingsFromStringXmlWPX4 ( HPX4 hBrd , unsigned int flags , const wchar_t * bufp ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='LoadSettingsFromStringXmlWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int __cdecl SaveSettingsToFileXmlAPX4 ( HPX4 hBrd , unsigned int flags , const char * pathnamep , const char * encodingp ); 
fcns.thunkname{fcnNum}='int32voidPtruint32cstringcstringThunk';fcns.name{fcnNum}='SaveSettingsToFileXmlAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
%  int __cdecl SaveSettingsToFileXmlWPX4 ( HPX4 hBrd , unsigned int flags , const wchar_t * pathnamep , const wchar_t * encodingp ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SaveSettingsToFileXmlWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int __cdecl LoadSettingsFromFileXmlAPX4 ( HPX4 hBrd , unsigned int flags , const char * pathnamep ); 
fcns.thunkname{fcnNum}='int32voidPtruint32cstringThunk';fcns.name{fcnNum}='LoadSettingsFromFileXmlAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'cstring'};fcnNum=fcnNum+1;
%  int __cdecl LoadSettingsFromFileXmlWPX4 ( HPX4 hBrd , unsigned int flags , const wchar_t * pathnamep ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='LoadSettingsFromFileXmlWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int __cdecl UploadFirmwareAPX4 ( HPX4 hBrd , const char * fw_pathnamep , unsigned int flags , unsigned int * out_flagsp , PX4_FW_UPLOAD_CALLBACK callbackp , void * callback_ctx ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringuint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='UploadFirmwareAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'cstring', 'uint32', 'uint32Ptr', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
%  int __cdecl UploadFirmwareWPX4 ( HPX4 hBrd , const wchar_t * fw_pathnamep , unsigned int flags , unsigned int * out_flagsp , PX4_FW_UPLOAD_CALLBACK callbackp , void * callback_ctx ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='UploadFirmwareWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint16Ptr', 'uint32', 'uint32Ptr', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
%  int __cdecl QueryFirmwareVersionInfoAPX4 ( const char * fw_pathnamep , PX4S_FW_VER_INFO * infop ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='QueryFirmwareVersionInfoAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 's_PX4S_FW_VER_INFO_tagPtr'};fcnNum=fcnNum+1;
%  int __cdecl QueryFirmwareVersionInfoWPX4 ( const wchar_t * fw_pathnamep , PX4S_FW_VER_INFO * infop ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='QueryFirmwareVersionInfoWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 's_PX4S_FW_VER_INFO_tagPtr'};fcnNum=fcnNum+1;
%  int __cdecl ExtractFirmwareNotesAPX4 ( const char * fw_pathnamep , char ** notes_pathpp , int * severityp ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ExtractFirmwareNotesAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'stringPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl ExtractFirmwareNotesWPX4 ( const wchar_t * fw_pathnamep , wchar_t ** notes_pathpp , int * severityp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ExtractFirmwareNotesWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl OpenSrdcFileAPX4 ( HPX4 hBrd , HPX4SRDC * handlep , const char * pathnamep , unsigned flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrcstringuint32Thunk';fcns.name{fcnNum}='OpenSrdcFileAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 's_px4srdchs_PtrPtr', 'cstring', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl OpenSrdcFileWPX4 ( HPX4 hBrd , HPX4SRDC * handlep , const wchar_t * pathnamep , unsigned flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='OpenSrdcFileWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 's_px4srdchs_PtrPtr', 'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl RefreshSrdcParametersPX4 ( HPX4SRDC hFile , unsigned flags ); 
fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='RefreshSrdcParametersPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4srdchs_Ptr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetSrdcItemAPX4 ( HPX4SRDC hFile , const char * namep , char ** valuepp ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='GetSrdcItemAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4srdchs_Ptr', 'cstring', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  int __cdecl GetSrdcItemWPX4 ( HPX4SRDC hFile , const wchar_t * namep , wchar_t ** valuepp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSrdcItemWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4srdchs_Ptr', 'uint16Ptr', 'uint16PtrPtr'};fcnNum=fcnNum+1;
%  int __cdecl SetSrdcItemAPX4 ( HPX4SRDC hFile , const char * namep , const char * valuep ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringThunk';fcns.name{fcnNum}='SetSrdcItemAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4srdchs_Ptr', 'cstring', 'cstring'};fcnNum=fcnNum+1;
%  int __cdecl SetSrdcItemWPX4 ( HPX4SRDC hFile , const wchar_t * namep , const wchar_t * valuep ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SetSrdcItemWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4srdchs_Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int __cdecl SaveSrdcFileAPX4 ( HPX4SRDC hFile , const char * pathnamep ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='SaveSrdcFileAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4srdchs_Ptr', 'cstring'};fcnNum=fcnNum+1;
%  int __cdecl SaveSrdcFileWPX4 ( HPX4SRDC hFile , const wchar_t * pathnamep ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SaveSrdcFileWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4srdchs_Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int __cdecl CloseSrdcFilePX4 ( HPX4SRDC hFile ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CloseSrdcFilePX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4srdchs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetRecordedDataInfoAPX4 ( const char * pathnamep , PX4S_RECORDED_DATA_INFO * infop , char ** operator_notespp ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetRecordedDataInfoAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 's_PX4S_RECORDED_DATA_INFO_tagPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  int __cdecl GetRecordedDataInfoWPX4 ( const wchar_t * pathnamep , PX4S_RECORDED_DATA_INFO * infop , wchar_t ** operator_notespp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetRecordedDataInfoWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 's_PX4S_RECORDED_DATA_INFO_tagPtr', 'uint16PtrPtr'};fcnNum=fcnNum+1;
%  int __cdecl InitRecordedDataInfoPX4 ( HPX4 hBrd , PX4S_RECORDED_DATA_INFO * infop ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='InitRecordedDataInfoPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 's_PX4S_RECORDED_DATA_INFO_tagPtr'};fcnNum=fcnNum+1;
%  int __cdecl EnumSrdcItemsAPX4 ( HPX4SRDC hFile , char ** itemspp , unsigned int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='EnumSrdcItemsAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4srdchs_Ptr', 'stringPtrPtr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl EnumSrdcItemsWPX4 ( HPX4SRDC hFile , wchar_t ** itemspp , unsigned int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='EnumSrdcItemsWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4srdchs_Ptr', 'uint16PtrPtr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl IsSrdcFileModifiedPX4 ( HPX4SRDC hFile ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='IsSrdcFileModifiedPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4srdchs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl SyncFirmwareToAdcClockPX4 ( HPX4 hBrd , int ignored ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SyncFirmwareToAdcClockPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl CalibrateAdcPX4 ( HPX4 hBrd , int adc_idx ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='CalibrateAdcPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl GetLibVersionPX4 ( unsigned long long * verp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetLibVersionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint64Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetDriverVersionPX4 ( HPX4 hBrd , unsigned long long * verp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDriverVersionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetSabFirmwareVersionPX4 ( HPX4 hBrd , unsigned long long * verp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSabFirmwareVersionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetPciFirmwareVersionPX4 ( HPX4 hBrd , unsigned long long * verp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetPciFirmwareVersionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetHardwareRevisionPX4 ( HPX4 hBrd , unsigned long long * verp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetHardwareRevisionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetSoftwareReleaseVersionPX4 ( unsigned long long * verp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetSoftwareReleaseVersionPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint64Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetVersionTextAPX4 ( HPX4 hBrd , unsigned int ver_type , char ** bufpp , unsigned int flags ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtruint32Thunk';fcns.name{fcnNum}='GetVersionTextAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'stringPtrPtr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl GetVersionTextWPX4 ( HPX4 hBrd , unsigned int ver_type , wchar_t ** bufpp , unsigned int flags ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtruint32Thunk';fcns.name{fcnNum}='GetVersionTextWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint16PtrPtr', 'uint32'};fcnNum=fcnNum+1;
%  int __cdecl SetUserDataPX4 ( HPX4 hBrd , void * data ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetUserDataPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'voidPtr'};fcnNum=fcnNum+1;
%  int __cdecl GetUserDataPX4 ( HPX4 hBrd , void ** datap ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetUserDataPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'voidPtrPtr'};fcnNum=fcnNum+1;
%  int __cdecl GetDriverStatsPX4 ( HPX4 hBrd , PX4S_DRIVER_STATS * statsp , int bReset ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetDriverStatsPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 's_PX4_DRIVER_STATS_tagPtr', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl ReadConfigEepromPX4 ( HPX4 hBrd , unsigned int eeprom_addr , unsigned short * eeprom_datap ); 
fcns.thunkname{fcnNum}='int32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='ReadConfigEepromPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int __cdecl WriteConfigEepromPX4 ( HPX4 hBrd , unsigned int eeprom_addr , unsigned short eeprom_data ); 
fcns.thunkname{fcnNum}='int32voidPtruint32uint16Thunk';fcns.name{fcnNum}='WriteConfigEepromPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'uint16'};fcnNum=fcnNum+1;
%  int __cdecl GetErrorTextAPX4 ( int res , char ** bufpp , unsigned int flags , HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32int32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='GetErrorTextAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'stringPtrPtr', 'uint32', 's_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetErrorTextWPX4 ( int res , wchar_t ** bufpp , unsigned int flags , HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32int32voidPtruint32voidPtrThunk';fcns.name{fcnNum}='GetErrorTextWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16PtrPtr', 'uint32', 's_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl CheckFirmwareVerPX4 ( HPX4 hBrd , unsigned int fw_ver , int fw_type , int constraint ); 
fcns.thunkname{fcnNum}='int32voidPtruint32int32int32Thunk';fcns.name{fcnNum}='CheckFirmwareVerPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'uint32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  int __cdecl FreeMemoryPX4 ( void * p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FreeMemoryPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int __cdecl ValidateConfigEepromPX4 ( HPX4 hBrd ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ValidateConfigEepromPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr'};fcnNum=fcnNum+1;
%  int __cdecl GetMinMaxAlignPX4 ( HPX4 hBrd , int itemIdx , unsigned int * pMinVal , unsigned int * pMaxVal , unsigned int * pAlnVal ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetMinMaxAlignPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_px4hs_Ptr', 'int32', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  int __cdecl DumpLibErrorAPX4 ( int res , const char * pPreamble , HPX4 hBrd , FILE * filp ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DumpLibErrorAPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 's_px4hs_Ptr', 's_iobufPtr'};fcnNum=fcnNum+1;
%  int __cdecl DumpLibErrorWPX4 ( int res , const wchar_t * pPreamble , HPX4 hBrd , FILE * filp ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DumpLibErrorWPX4'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16Ptr', 's_px4hs_Ptr', 's_iobufPtr'};fcnNum=fcnNum+1;
structs.s_px4hs_.members=struct('hello_there', 'int32');
structs.s_PX4S_FW_VER_INFO_tag.members=struct('struct_size', 'uint32', 'fw_pkg_ver', 'uint32', 'fw_pkg_cust_enum', 'uint32', 'readme_sev', 'int32', 'extra_flags', 'int32');
structs.s_PX4_DRIVER_STATS_tag.members=struct('struct_size', 'uint32', 'nConnections', 'int32', 'isr_cnt', 'uint32', 'dma_finished_cnt', 'uint32', 'dma_started_cnt', 'uint32', 'acq_started_cnt', 'uint32', 'acq_finished_cnt', 'uint32', 'dcm_reset_cnt', 'uint32', 'dma_bytes', 'uint64');
structs.s_PX4S_FILE_WRITE_PARAMS_tag.members=struct('struct_size', 'uint32', 'pathname', 'cstring', 'pathname2', 'cstring', 'pathname3', 'cstring', 'pathname4', 'cstring', 'flags', 'uint32', 'init_bytes_skip', 'uint32', 'max_file_seg', 'uint64', 'assumed_chan_sel', 'int32', 'pfnCallback', 'FcnPtr', 'callbackCtx', 'voidPtr', 'flags_out', 'uint32', 'operator_notes', 'cstring', 'ts_filenamep', 'cstring');
structs.s_PX4S_REC_SESSION_PARAMS_tag.members=struct('struct_size', 'uint32', 'rec_flags', 'int32', 'rec_samples', 'uint64', 'acq_samples', 'uint32', 'xfer_samples', 'uint32', 'filwp', 's_PX4S_FILE_WRITE_PARAMS_tagPtr', 'dma_bufp', 'uint8Ptr', 'dma_buf_samples', 'uint32', 'ss_len_samples', 'uint32', 'ss_period_xfer', 'uint32', 'ss_period_ms', 'uint32', 'pfnCallback', 'FcnPtr', 'callbackData', 'voidPtr');
structs.s_PX4S_REC_SESSION_PROG_tag.members=struct('struct_size', 'uint32', 'status', 'int32', 'elapsed_time_ms', 'ulong', 'samps_recorded', 'uint64', 'samps_to_record', 'uint64', 'xfer_samples', 'uint32', 'xfer_count', 'uint32', 'snapshot_counter', 'uint32', 'err_res', 'int32', 'err_textp', 'cstring');
structs.s_PX4S_RECORDED_DATA_INFO_tag.members=struct('struct_size', 'uint32', 'boardName', 'int8#16', 'boardSerialNum', 'uint32', 'channelCount', 'uint32', 'channelNum', 'uint32', 'sampSizeBytes', 'uint32', 'sampSizeBits', 'uint32', 'bSignedSamples', 'int32', 'sampleRateMHz', 'double', 'inputVoltRngPP', 'double', 'segment_size', 'uint32', 'header_bytes', 'uint32', 'bTextData', 'int32', 'textRadix', 'int32', 'trig_offset', 'uint32', 'bPreTrigger', 'int32');
structs.s_PX4S_REMOTE_CONNECT_CTXA_tag.members=struct('struct_size', 'uint32', 'flags', 'uint16', 'timeout_secs', 'uint16', 'port', 'uint16', 'pServerAddress', 'cstring', 'pApplicationName', 'cstring', 'pSubServices', 'cstring');
structs.s_PX4S_REMOTE_CONNECT_CTXW_tag.members=struct('struct_size', 'uint32', 'flags', 'uint16', 'timeout_secs', 'uint16', 'port', 'uint16', 'pServerAddress', 'uint16Ptr', 'pApplicationName', 'uint16Ptr', 'pSubServices', 'uint16Ptr');
structs.s_px4rsh_.members=struct('reserved', 'int32');
structs.s_px4srdchs_.members=struct('reserved', 'int32');
structs.s_iobuf.packing=8;
structs.s_iobuf.members=struct('m_ptr', 'cstring', 'm_cnt', 'int32', 'm_base', 'cstring', 'm_flag', 'int32', 'm_file', 'int32', 'm_charbuf', 'int32', 'm_bufsiz', 'int32', 'm_tmpfname', 'cstring');
methodinfo=fcns;